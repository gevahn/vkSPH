#version 450

#extension GL_GOOGLE_include_directive : require
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_control_flow_attributes : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

const uint num_particals = 1*1024 * 1024;
const uint GRID_DIM = 1024;
const uint grid_size = GRID_DIM * GRID_DIM + GRID_DIM;

layout(binding = 0) uniform UniformBufferObject {
    mat4 model;
    mat4 view;
    mat4 proj;
} ubo;

layout ( binding = 1, rgba8 ) uniform writeonly image2D resultImage;

struct Particle {
    vec3 pos;
    uint cell;
    vec3 velocity;
    uint state;
    float timeInfected;
    uint cellCount;
};

layout(std430, binding = 2) buffer ParticleObject{
    Particle particleArray[num_particals];
};

layout(std430, binding = 3) buffer gridCountObject{
    uint gridCountArray[grid_size];
};

layout(std430, binding = 6) buffer SortedParticleObject{
    Particle sortedParticleArray[num_particals];
};

const int HEIGHT = 1080;
const int WIDTH = 1920;
const float EPS = 0.000001;


void main()
{   
    const int unroll = 1;

    [[unroll]]
    for (int i=0; i < unroll; i++){
        Particle p = particleArray[unroll*gl_GlobalInvocationID.x + i];    
        uint sortedIdx = gridCountArray[p.cell] + p.cellCount;
        sortedParticleArray[sortedIdx] = p;
    }    
}

