#version 450

#extension GL_GOOGLE_include_directive : require
#extension GL_ARB_separate_shader_objects : enable

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

const uint num_particals = 1*1024*1024;
const uint GRID_DIM = 1024;
const uint grid_size = GRID_DIM * GRID_DIM;

layout(binding = 0) uniform UniformBufferObject {
    mat4 model;
    mat4 view;
    mat4 proj;
} ubo;

layout ( binding = 1, rgba8 ) uniform writeonly image2D resultImage;

struct Particle {
    vec3 pos;
    uint cell;
    vec3 velocity;
    uint state;
    float timeInfected;
    uint cellCount;
};

layout(std430, binding = 2) buffer ParticleObject{
    Particle particleArray[num_particals];
};

//layout(std430, binding = 3) buffer gridObject{
    //uint gridArray[grid_size];
//};

layout(std430, binding = 3) buffer gridCountObject{
    uint gridCountArray[grid_size];
};


const int HEIGHT = 1080;
const int WIDTH = 1920;
const ivec2 RES = ivec2(WIDTH, HEIGHT);
const float EPS = 0.000001;

const vec2 gridCellSize = vec2(1.0f, 1.0f); //meters
const float gridCellHeigth = 1.0f; //meters

uint posToGrid(vec3 pos) {
    uvec2 gridCoords = uvec2((pos.xy + gridCellSize * GRID_DIM / 2)   / gridCellSize);
    //uvec2 gridCoords = uvec2((pos.xy)   / gridCellSize);
    return gridCoords.x + gridCoords.y * GRID_DIM;
}

const uint SUSPTIBLE = 0;
const uint INFECTED = 1;
const uint RECOVERED = 2;
const uint REMOVED = 3;

const vec4 colors[4] = {
    vec4(1.0, 1.0, 1.0, 1.0),
    vec4(1.0, 0.0, 1.0, 1.0),
    vec4(0.0, 1.0, 1.0, 1.0),
    vec4(1.0, 1.0, 0.0, 1.0)
};

float random (vec2 st) {
    return fract(sin(dot(st.xy, vec2(12.9898,78.233)))*43758.5453123);
}


const float dt = 0.001;
void main()
{   
    Particle p = particleArray[gl_GlobalInvocationID.x];    

    vec4 SSPos = ubo.proj * ubo.view * vec4(p.pos, 1.0);
    if (any(greaterThan(SSPos.xyz, SSPos.www)) || any(lessThan(SSPos.xyz, -SSPos.www))) {
        return;
    }
    SSPos = SSPos / SSPos.w;

    vec2 NDCPos = (1 + SSPos.xy) / 2;

    imageStore(resultImage, ivec2(NDCPos * RES), colors[p.state]);
    
}

