#version 450

#extension GL_GOOGLE_include_directive : require
#extension GL_ARB_separate_shader_objects : enable

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

const uint num_particals = 1*1024*1024;
const uint GRID_DIM = 64;
const uint grid_size = GRID_DIM * GRID_DIM;

layout(binding = 0) uniform UniformBufferObject {
    mat4 model;
    mat4 view;
    mat4 proj;
    float time;
} ubo;

layout ( binding = 1, rgba8 ) uniform writeonly image2D resultImage;

struct Particle {
    vec3 pos;
    uint cell;
    vec3 velocity;
    uint state;    
    float timeInfected;
    uint cellCount;
};

layout(std430, binding = 2) buffer ParticleObject{
    Particle particleArray[num_particals];
};


layout(std430, binding = 3) buffer gridCountObject{
    uint gridCountArray[];
};

layout(binding = 4, rgba16) uniform readonly image2D noiseTex;


const int HEIGHT = 1080;
const int WIDTH = 1920;
const float EPS = 0.000001;

const vec2 gridCellSize = vec2(1.0f, 1.0f); //meters
const float gridCellHeigth = 1.0f; //meters

uint posToGrid(vec3 pos) {
    uvec2 gridCoords = uvec2((pos.xy + gridCellSize * GRID_DIM / 2)   / gridCellSize);
    //uvec2 gridCoords = uvec2((pos.xy)   / gridCellSize);
    return gridCoords.x + gridCoords.y * GRID_DIM;
}

const uint SUSPTIBLE = 0;
const uint INFECTED = 1;
const uint RECOVERED = 2;
const uint REMOVED = 3;

float random (vec2 st) {
    return fract(sin(dot(st.xy, vec2(12.9898,78.233)))*43758.5453123);
}

const float dFactor = 0.0015;
const float cFactor = 0.002;
const float tFactor = 10;


const float dt = 0.001;
void main()
{   
    Particle p = particleArray[gl_GlobalInvocationID.x];    
        
    ivec2 noiseCoords = abs(ivec2(gl_GlobalInvocationID.x % 256 + ubo.time*3542, gl_GlobalInvocationID.x / 256 + ubo.time*1563) % 256);
    vec4 rand = imageLoad(noiseTex, noiseCoords);

    float timeFactor = step(tFactor, ubo.time - p.timeInfected);
    
    if (p.state == INFECTED && rand.x < dFactor * timeFactor) {        
        p.state = REMOVED;
        particleArray[gl_GlobalInvocationID.x].state = REMOVED;        
    }     
    
    if (p.state == INFECTED && rand.y < cFactor * timeFactor) {        
        p.state = RECOVERED;
        particleArray[gl_GlobalInvocationID.x].state = RECOVERED;        
    } 

    if (p.state != REMOVED) {
        p.pos.xy = p.pos.xy + dt * p.velocity.xy * (2 * rand.zw - 1);
    }

    p.pos = clamp(p.pos, -gridCellSize.x * GRID_DIM / 2 - 1, gridCellSize.x * GRID_DIM / 2 + 1);
    uint gridIdx = posToGrid(p.pos);
    uint cellCount = atomicAdd(gridCountArray[gridIdx], 1);
    particleArray[gl_GlobalInvocationID.x].pos = p.pos;
    particleArray[gl_GlobalInvocationID.x].cell = gridIdx;
    particleArray[gl_GlobalInvocationID.x].cellCount = cellCount;
}

