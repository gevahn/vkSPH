#version 450

#extension GL_GOOGLE_include_directive : require
#extension GL_ARB_separate_shader_objects : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable

layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

const uint num_particals = 1*1024 * 1024;
const uint GRID_DIM = 1024;
const uint grid_size = GRID_DIM * GRID_DIM + GRID_DIM;
const uint LDSSize = 4096;

layout(binding = 0) uniform UniformBufferObject {
    mat4 model;
    mat4 view;
    mat4 proj;
} ubo;

layout ( binding = 1, rgba8 ) uniform writeonly image2D resultImage;

struct Particle {
    vec3 pos;
    uint cell;
    vec3 velocity;
    uint state;
    float timeInfected;
    uint cellCount;
};

layout(std430, binding = 2) buffer ParticleObject{
    Particle particleArray[num_particals];
};

layout(std430, binding = 3) buffer gridCountObject{
    uint gridCountArray[grid_size];
};

layout(std430, binding = 4) buffer SortedParticleObject{
    Particle sortedParticleArray[num_particals];
};

const int HEIGHT = 1080;
const int WIDTH = 1920;
const float EPS = 0.000001;

shared uint sdata[LDSSize];

void main()
{   
    // get the prev workgroup last elements and scan in registers
    uint sumIdx = 0;
    sumIdx = gridCountArray[GRID_DIM * GRID_DIM + gl_LocalInvocationIndex.x];
    uint lastInGroup = gridCountArray[GRID_DIM * GRID_DIM + (gl_SubgroupID + 1) * gl_SubgroupSize - 1];
    sumIdx = subgroupExclusiveAdd(sumIdx);

    // save to shared
    if (gl_SubgroupInvocationID == gl_SubgroupSize - 1) {
        sdata[gl_SubgroupID] = sumIdx + lastInGroup;        
    }    
    
    
    memoryBarrierShared();
    barrier();
    // scan all the way in shared memory
    if (gl_LocalInvocationIndex.x < gl_NumSubgroups) {
       uint sharedSum = 0;
       sharedSum = sdata[gl_LocalInvocationIndex.x];
       sharedSum = subgroupExclusiveAdd(sharedSum);
       sdata[gl_WorkGroupSize.x + gl_LocalInvocationIndex.x] = sharedSum;       
    }

    memoryBarrierShared();
    barrier();

    // create the full scanned array in shared memory
    uint blockSum = sdata[gl_WorkGroupSize.x + gl_SubgroupID];    
    
    sumIdx += blockSum;
    sdata[gl_LocalInvocationIndex.x] = sumIdx;

    memoryBarrierShared();
    barrier();

    // update the array with the block offsets
    blockSum = sdata[gl_GlobalInvocationID.x / gl_WorkGroupSize.x];
    gridCountArray[gl_GlobalInvocationID.x] += blockSum;     

    if (gl_WorkGroupID.x == 0) {
       //gridCountArray[GRID_DIM * GRID_DIM + gl_LocalInvocationIndex.x] = sdata[gl_LocalInvocationIndex.x];
    }
}

